name: Release

on:
  push:
    tags:
      - "v*.*.*" # This triggers the workflow when a version tag is pushed

jobs:
  release:
    name: Create Release and Build
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository with full history to avoid detached HEAD
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          ref: ${{ github.ref }} # Checkout the tag that triggered the workflow

      # Get the branch name associated with the tag (assumes tag was created on a branch)
      - name: Find branch from tag
        id: get_branch
        run: |
          BRANCH=$(git branch -r --contains ${{ github.sha }} | grep -v '\->' | head -n 1 | sed 's/ *origin\///')
          echo "branch_name=$BRANCH" >> $GITHUB_ENV

      # Switch to the branch (since we're currently in detached HEAD)
      - name: Checkout branch
        run: git checkout ${{ env.branch_name }}

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install cargo-release for managing release creation
      - name: Install cargo-release
        run: cargo install cargo-release

      # Check if the version in Cargo.toml matches the tag
      - name: Verify version matches tag
        id: check_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          TAG=${{ github.ref }}
          TAG_VERSION=${TAG/refs\/tags\/v/}
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: Cargo.toml version ($VERSION) does not match tag version ($TAG_VERSION)."
            exit 1
          else
            echo "Version matches tag: $VERSION"
          fi

      # Create GitHub release (skip publishing and tagging since the tag already exists)
      - name: Create GitHub Release
        run: cargo release --no-publish --no-tag --no-confirm

  build:
    name: Build for Multiple Platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout the repository with full history to avoid detached HEAD
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      # Switch to the branch associated with the tag
      - name: Checkout branch
        run: git checkout ${{ env.branch_name }}

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Build the project for each platform
      - name: Build
        run: cargo build --release

      # Archive the binaries (optional, but useful for release assets)
      - name: Archive binary
        run: |
          zip -j binary-${{ matrix.platform }} target/release/prepare_dump_for_local

      # Upload the binary as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.platform }}
          path: binary-${{ matrix.platform }}.zip
