name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "New version number (e.g., 0.1.0)"
        required: true
        default: "0.1.0"

jobs:
  release:
    name: Create Release and Build
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository with full history
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched

      # Get the branch name associated with the latest tag
      - name: Find branch from tag
        id: get_branch
        run: |
          BRANCH=$(git branch -r --contains $(git describe --tags --abbrev=0) | grep -v '\->' | head -n 1 | sed 's/ *origin\///')
          echo "branch_name=$BRANCH" >> $GITHUB_ENV

      # Switch to the branch
      - name: Checkout branch
        run: git checkout ${{ env.branch_name }}

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install cargo-release for managing release creation
      - name: Install cargo-release
        run: cargo install cargo-release

      # Update the version in Cargo.toml
      - name: Update version in Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" Cargo.toml

      # Create a new tag
      - name: Create new tag
        run: |
          git tag "v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"

      # Create GitHub release
      - name: Create GitHub Release
        run: cargo release --no-publish --no-tag --no-confirm --execute

  build:
    name: Build for Multiple Platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout the repository with full history
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Switch to the branch associated with the tag
      - name: Checkout branch
        run: git checkout ${{ env.branch_name }}

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Build the project for each platform
      - name: Build
        run: cargo build --release

      # Archive the binaries (optional, but useful for release assets)
      - name: Archive binary
        run: |
          zip -j binary-${{ matrix.platform }} target/release/prepare_dump_for_local

      # Upload the binary as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.platform }}
          path: binary-${{ matrix.platform }}.zip
